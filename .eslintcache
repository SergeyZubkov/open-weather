[{"C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\index.js":"1","C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\App.js":"2","C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\CityForm\\CItyForm.js":"3","C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\CityForm\\CityForm.js":"4"},{"size":251,"mtime":1607105018701,"results":"5","hashOfConfig":"6"},{"size":1758,"mtime":1607112623193,"results":"7","hashOfConfig":"6"},{"size":991,"mtime":1607100319014,"results":"8","hashOfConfig":"6"},{"size":1256,"mtime":1607111058949,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ythj6m",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":5,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\index.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\App.js",["20"],"C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\CityForm\\CItyForm.js",["21","22","23","24","25","26","27"],"C:\\Users\\Sergey\\Desktop\\work\\work\\open-weather\\src\\CityForm\\CityForm.js",["28"],"import { useState } from 'react';\r\nimport {Form, Button} from 'react-bootstrap';\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport {debounce} from 'lodash';\r\n\r\nimport cityList from '../city.list.json';\r\n\r\nconst cityNames = cityList.map(c => c.name);\r\n\r\nexport default ({onAddCity}) => {\r\n    let [city, setCity] = useState([])\r\n    let [matchedCities, setMatchedCities] = useState([]);\r\n\r\n    const findCities = debounce( (str) => {\r\n        setMatchedCities( cityNames.filter(c => c.toLowerCase().includes(str.toLowerCase())).slice(0, 20) );\r\n    }, 200 )\r\n\r\n    return (\r\n       <Form className=\"mt-4\"> \r\n            <Form.Group>\r\n                <Typeahead\r\n                    id=\"basic-typeahead-single\"\r\n                    labelKey=\"name\"\r\n                    onInputChange={findCities}\r\n                    onChange={setCity}\r\n                    options={matchedCities}\r\n                    placeholder=\"Выберите город\"\r\n                    selected={city}\r\n                    renderMenuItemChildren={( option ) => (\r\n                        <div>{option}</div>)}\r\n                />\r\n            </Form.Group>\r\n            <Button onClick={() => onAddCity(city[0])}>Добавить</Button>\r\n       </Form> \r\n    )\r\n}",["29","30"],{"ruleId":"31","severity":1,"message":"32","line":15,"column":5,"nodeType":"33","endLine":23,"endColumn":6},{"ruleId":"34","severity":1,"message":"35","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":6,"column":1,"nodeType":"40","endLine":33,"endColumn":2},{"ruleId":"41","severity":2,"message":"42","line":10,"column":34,"nodeType":"36","messageId":"43","endLine":10,"endColumn":46},{"ruleId":"41","severity":2,"message":"44","line":15,"column":24,"nodeType":"36","messageId":"43","endLine":15,"endColumn":29},{"ruleId":"41","severity":2,"message":"45","line":16,"column":26,"nodeType":"36","messageId":"43","endLine":16,"endColumn":35},{"ruleId":"41","severity":2,"message":"46","line":18,"column":27,"nodeType":"36","messageId":"43","endLine":18,"endColumn":35},{"ruleId":"41","severity":2,"message":"47","line":24,"column":45,"nodeType":"36","messageId":"43","endLine":24,"endColumn":53},{"ruleId":"38","severity":1,"message":"39","line":10,"column":1,"nodeType":"40","endLine":36,"endColumn":2},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'cityList' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-undef","'ControlLabel' is not defined.","undef","'value' is not defined.","'countries' is not defined.","'onChange' is not defined.","'ReactDOM' is not defined.","no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-global-assign","no-unsafe-negation"]